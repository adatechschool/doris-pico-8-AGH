pico-8 cartridge // http://www.pico-8.com
version 38
__lua__
--init
-- constantes
local largeur_case = 8
local hauteur_case = 8
local nombre_joueurs = 4
local taille_carte = 15
local spritehumain = {2, 3, 4}
local premier_tour =true
-- variables globales
local parcours = {}
local joueurs = {}
local touractuel = 1
local de = 0
local chemin_deja_parcouru = {}
local lance_de_de = false
function _init()
  bougie1={
    x=24,
    y=24,
    spr=64+(time()*5%4)
    }
  bougie2={
    x=24,
    y=64,
    spr=64+(time()*5%4)
    }
  bougie3={
    x=24,
    y=96,
    spr=64+(time()*5%4)
    }
  fantome1={
    x=96,
    y=56,
    spr=80+(time()*5%8)
    }
  fantome2={
    x=0,
    y=32,
    spr=80+(time()*5%8)
    }
  fantome3={
    x=80,
    y=88,
    spr=80+(time()*5%8)
    }
  create_joueurs()
  creation_tbl_parcouru()
  delai=0
  parcours[1] ={}
  parcours[2] ={}
  parcours[3] ={}
  create_de_p()
  create_de_h()
end
--update
function _update()
local joueurcourant = joueurs[touractuel]
local dx, dy = 0, 0
delai = delai +1
  if finpartie() then
    return
  end
  if joueurcourant.vivant then
    if joueurcourant.nom == "zombie"
 then
 if (not lance_de_de) score_de_p()
   if lance_de_de == true then
    if btnp(‚¨ÖÔ∏è) then
      dx = -1
    elseif btnp(‚û°Ô∏è) then
      dx = 1
      printh("droite")
    elseif btnp(‚¨ÜÔ∏è) then
      dy = -1
      printh("haut")
    elseif btnp(‚¨áÔ∏è) then
      dy = 1
    end
    mouvement_zombie(dx, dy)
      is_dead()
    delai= 0
    end
 else
        if delai == 20
        then mouvement_humain(joueurcourant.x, joueurcourant.y)
           is_dead()
        delai = 0
      end
 end
    if de <= 0
     then
     prochaintour()
    end
  else
    prochaintour()
  end
end
-- affichage
function _draw()
  cls()
  palt(0,false)
  palt(13,true)
  map(0,0,0,0,128,64)
-- animations
spr(64+(time()*5%4), bougie1.x, bougie1.y)
spr(64+(time()*5%4), bougie2.x, bougie2.y)
spr(64+(time()*5%4), bougie3.x, bougie3.y)
spr(80+(time()*5%8), fantome1.x, fantome1.y)
spr(80+(time()*5%8), fantome2.x, fantome2.y)
spr(80+(time()*5%8), fantome3.x, fantome3.y)
  -- affichage des joueurs
  for i = 1, nombre_joueurs do
    if joueurs[i].vivant then
      spr(joueurs[i].sprite, (joueurs[i].x) * largeur_case, (joueurs[i].y) * hauteur_case)
    else spr(13, (joueurs[i].x) * largeur_case, (joueurs[i].y) * hauteur_case)
    end
  end
-- affichage des d„Çå„Åüs
  spr(dh.sprite,74,2)
  spr(dp.sprite,54,2)
  -- si c'est notre tour et que le lance de d„Çå„Åü n'est pas encore lanc„Çå„Åü afficher "A vous de lancer le d„Çå„Åü"
  if touractuel==4 and lance_de_de==false
  then
  print("a vous de lancer le de",23,11,0)
  end
  -- si c'est notre tour et que le d„Çå„Åü a „Çå„Åüt„Çå„Åü lanc„Çå„Åü alors afficher les mouvements restants
  if (de != nil) and touractuel == 4 and lance_de_de
 then
  print(de.." mouvements restants",28,11,0)
  end
end
-->8
--humains
 -- positionnement des joueurs
 function create_joueurs()
  joueurs={
   {
    x = 0,
    y = 0,
    pv = 3,
    sprite = spritehumain[1],
    vivant = true,
    nom = "rick"
  },
  {
    x = taille_carte,
    y = 1,
    pv = 3,
    sprite = spritehumain[2],
    vivant = true,
    nom = "elise"
  },
  {
    x = 0,
    y = taille_carte,
    pv = 3,
    sprite = spritehumain[3],
    vivant = true,
    nom = "josh"
  },
  {
    x = taille_carte-1,
    y = taille_carte-1,
    pv = 3,
    sprite = 1,
    vivant = true,
    nom = "zombie"
  }
  }
  end
-- initialisation du chemin deja parcouru par les humains
function creation_tbl_parcouru()
  for i = 1, nombre_joueurs - 1 do
    chemin_deja_parcouru[i] = {}
    for j = 0, taille_carte do
      chemin_deja_parcouru[i][j] = {}
      for k = 0, taille_carte do
        chemin_deja_parcouru[i][j][k] = false
      end
    end
  end
end
-- gestion des mouvements zombie
function mouvement_zombie(dx, dy)
  if dx ~= 0 or dy ~= 0 then
    local joueurcourant = joueurs[touractuel]
    local nouvellex = joueurcourant.x + dx
    local nouvelley = joueurcourant.y + dy
    -- verifier les limites de la carte
   if nouvellex >= 0
    and nouvellex <= taille_carte
    and nouvelley >= 0
    and nouvelley <= taille_carte
    and not verif_flag(0,nouvellex, nouvelley) then
      joueurcourant.x = nouvellex
      joueurcourant.y = nouvelley
      de = de - 1
      if (de == 0) lance_de_de = false
    end
  end
end
function mouvement_humain(x, y)
  local possibilites = {}
  local case_haut_y = y - 1
  local case_bas_y = y + 1
  local case_gauche_x = x - 1
  local case_droite_x = x + 1
  if not verif_flag(0,x,case_haut_y)
    then if case_haut_y < 16 and case_haut_y > -1
    then if chemin_deja_parcouru[touractuel][x][case_haut_y]  == false
                then possibilites[#possibilites+1]= {x,case_haut_y}
              end
              end
  end
  if not verif_flag(0,x,case_bas_y)
    then if case_bas_y < 16 and case_bas_y > -1
    then if chemin_deja_parcouru[touractuel][x][case_bas_y] == false
                then possibilites[#possibilites+1]={x,case_bas_y}
              end
              end
  end
  if not verif_flag(0,case_gauche_x,y)
   then if case_gauche_x < 16 and case_gauche_x > -1
          then if chemin_deja_parcouru[touractuel][case_gauche_x][y] == false
          then possibilites[#possibilites+1]={case_gauche_x,y}
        end
        end
  end
  if not verif_flag(0,case_droite_x,y)
    then if case_droite_x < 16 and case_droite_x > -1
    then if chemin_deja_parcouru[touractuel][case_droite_x][y] == false
                then possibilites[#possibilites+1]={case_droite_x,y}
              end
              end
  end
  if #possibilites > 0
  then local choix = flr(rnd(#possibilites)) + 1
    chemin_deja_parcouru[touractuel][joueurs[touractuel].x][joueurs[touractuel].y]= true
    append_element(parcours, { joueurs[touractuel].x, joueurs[touractuel].y })
   if #possibilites == 1
   then joueurs[touractuel].x=possibilites[1][1]
    joueurs[touractuel].y=possibilites[1][2]
    else
    joueurs[touractuel].x=possibilites[choix][1]
    joueurs[touractuel].y=possibilites[choix][2]
    end
  else
  retour = remove(parcours)
  if retour ~= nil then
    chemin_deja_parcouru[touractuel][joueurs[touractuel].x][joueurs[touractuel].y]= true
    joueurs[touractuel].x = retour[1]
    joueurs[touractuel].y = retour[2]
  end
  end
  de = de - 1
end
-->8
--zombie
-- gestion des mouvements zombie
function mouvement_zombie(dx, dy)
  if dx ~= 0 or dy ~= 0 then
    local joueurcourant = joueurs[touractuel]
    local nouvellex = joueurcourant.x + dx
    local nouvelley = joueurcourant.y + dy
    -- v„Çå„Åürifier les limites de la carte
   if nouvellex >= 0
    and nouvellex <= taille_carte
    and nouvelley >= 0
    and nouvelley <= taille_carte
    and not verif_flag(0,nouvellex, nouvelley) then
      joueurcourant.x = nouvellex
      joueurcourant.y = nouvelley
      de = de - 1
      if (de == 0) lance_de_de = false
    end
  end
end
-->8
--lance de de
function create_de_p()
    dp={
    x=74,
    y=2,
    sprite=112,
    }
end
function create_de_h()
    dh={
    x=54,
    y=2,
    sprite=112,
    }
end
function draw_de_p()
    if (de!=nil) then
    spr(dp.sprite,dp.x,dp.y)
end
end
function draw_de_h()
    if (scoreh!=nil) then
    spr(dh.sprite,dh.x,dh.y)
end
end
function score_de_p()
    if btnp(üÖæÔ∏è)  then de=flr(rnd(6))+1
 if (de==1) dp.sprite=122
 if (de==2) dp.sprite=123
 if (de==3) dp.sprite=124
 if (de==4) dp.sprite=125
 if (de==5) dp.sprite=126
 if (de==6) dp.sprite=127
 lance_de_de = true
end
end
function score_de_h()
   de=flr(rnd(6))+1
 if (de==1) dh.sprite=106
 if (de==2) dh.sprite=107
 if (de==3) dh.sprite=108
 if (de==4) dh.sprite=109
 if (de==5) dh.sprite=110
 if (de==6) dh.sprite=111
end
-->8
--fonctions
-- gestion des tours
function prochaintour()
  -- si c'est le premier tour ne pas ajouter 1 au tour actuel
if premier_tour
then premier_tour = false
else
touractuel = touractuel + 1
end
  if touractuel > nombre_joueurs then
    touractuel = 1
  end
  score_de_h()
end
-- verification de fin de partie
function finpartie()
for i=1,3 do
  if joueurs[i].vivant==true then
    return false
end
  end
  return true
end
function is_dead()
 if joueurs[4].x == joueurs[1].x and joueurs[4].y == joueurs[1].y and joueurs[1].vivant == true then
              joueurs[1].vivant=false
              sfx(0)
            end
          if joueurs[4].x == joueurs[2].x and joueurs[4].y == joueurs[2].y and joueurs[2].vivant == true then
            joueurs[2].vivant=false
            sfx(0)
          end
          if joueurs[4].x == joueurs[3].x and joueurs[4].y == joueurs[3].y and joueurs[3].vivant then
            joueurs[3].vivant=false
            sfx(0)
            end
end
function verif_flag(flag,x,y)
local sprite=mget(x,y)
return fget(sprite,flag)
end
function remove(tab)
  local index = #tab[touractuel]
  local dernier_element = tab[touractuel][index]
  tab[touractuel][index] = nil
  return dernier_element
end
function append_element(tbl, element)
  if #tbl[touractuel] < 1 then
  tbl[touractuel] = {element}
  else
    tbl[touractuel][#tbl[touractuel]+1] = element
  end
end










__gfx__
55555555ddddddddd00000ddddaaaddddd777ddd6666666688888888445544444455444466666666666666666666666638333333dd7222dddddddddd66656666
55555555dd33333dd0fff0ddddaaaaddd77777dd666666668888888855445544554488446666666868866666666668868a8333e3d222777fdd7777dd666a6666
55555555d33703ddd01f100ddaffffadd7ffff7d6666666688888888445544554455448866666686688868866888888638333eae2277070fd777777d66656666
55555555dd33333dddffffddda1ff1add73ff37d66666666888888885544554455445544666688866686866668888866333233e3d727777fd707707d66656666
55555555dd33338ddf3333fddaffffaddd6f66dd66666666888888884455444444554444666866666668866666888886332a23332722672dd777777d66656666
55555555ddb3b8dddd0aa0dddfeeeefddfccccfd666666668888888855445544554455446686886666666866688888863c32339322777222dd7007dd66656666
55555555d3bbbb3ddd1111ddddccccdddd2222dd66666666888888884455445544554455688666866666668668868886cac339a9d770022ddd7777dd66656666
55555555dd3dd3dddd4dd4dddd0dd0dddd1dd1dd666666668888888855445544554455446666666666666666666666663c333393dd7772dddddddddd66555666
55335555555b355553333b555bbbbb555553555555bb5bb5000ccc000000e0005c55555566666666667777666667666733333333cccccccccccccccccc4cc4cc
5333555555bbb355333333b5bbbb33b5553bb5555b53b33b00cdcdc0000fef00cac555e566666666666666666667666733333b33ccccccccccccccccc554455c
5333533555b333553bb333353bb3bbb55533355555bb3b5300ccdcc0000eee005c555eae6767676766777766666766673b333333cccccccccc7878cccc4cc4cc
5533533555333355b33b3335533b333553bbbb555b34b3b5000ccc00bb0eee00555e55e567676767666666666667666733333333cccccccccc8cc7ccc554455c
553333355bbbbb353333335555435455533333555354b5350000b03003b0300055eae55567676767667777666667666733333333cccccccccc7cc8cccc4cc4cc
553333355333333554544555555445553bbbbbb5554535550030b330003b30bb5c5e55c567676767666666666667666733333333cccccccccc8787ccc554455c
5553335553334335554445555554455553333355554555550033b30000b33b30cac55cac66666666667777666667666733b333b3cccccccccccccccccc4cc4cc
555333555554455555544555555445555554555555455555000330000003b3005c5555c566666666666666667777777733333333ccccccccccccccccc554455c
666666663333333354444444555666555555555555566655555555556566566554444444666666666666666666622666ddddd566444444444444644455500555
666666663333333354444444556666655555555555665665553335555556656642444444663333666669966666222266dd8dd5dd455445545555575400550550
66666666333333335444444455667665555655555665556653b33335665565664442224463b333366660066662222226d8f8d5dc477447746666675450050000
66666666333333335444444455677765556665555666566653b3333566655555442e822463b33336666996666ffffff6dd8bd5dc656665664444644455000005
66666666333333335444444455667665555655555666566653333b35655566564428222433333b36660000666fcffcf6dddbd5dd456445644444644450050055
6666666633333333544444445566766555565555566656665333bb3565666656442222243333bb36669999666ffffff69dddd5da456445645555575455550055
66666666333333335544445555666665558665555666666655333355556655554442224463333336600000066ff44ff650055005456445646666675455500005
66666666333333335555555556666666566866665666666655555555655556655444444566333366699999966ff44ff660066006456445644444644400000000
7074074067777775775777577775777766dd66ddee6eeeee3b33333b6366366354444444666666666666666663663663666666666666666666666666e8888888
4074000066666665765766576665766666dd66dd446e4444b3333b333336636654422244626666666662226632366366611111169999999962222666ec8c8c88
40000740666666655555555566657666dd66dd66446e44443333b3b366336366542222246662226666222226663222666c17c1c679c7cc9c7c27c666e888888c
40740740655555555777577755555555dd66dd66446e444433333b3366633333522e8222662e8226622e8222662e82236c1cc1c6c97ccc9c6c2cc666ec8c8c8c
0074074067777775576657667777757766dd66dd6666666633b333336333663652282222662822266228222263282226111111119999999922222222e8888888
7074000066666665555555556666657666dd66ddeeeee6ee3b3b333363666636522222226622222662222222632222269111111a8999999a8222222a9888888a
40000740666666657757775766666576dd66dd66444446e433b3333b336633335422222466622266662222263362223320022002500550055005500520022002
40740740655555557657665755555555dd66dd66444446e4b33333b3633336635442224566666666666222666333366360066006600660066006600660066006
5555a5555555a5555555a555555555550000000000000000000000000000000000000000aaa778aaaaaaaaaacccccccc11111111000000000000000000000000
555955555555955555555955555595550000000000000000000000000000000000000000aa77887aaaaa9aaacccccccc11111111000000000000000000000000
555585555555855555558555555585550000000000000000000000000000000000000000a8878777aaaaaaaacccccccc11111111000000000000000000000000
5557f7555557f7555557f7555557f7550000000000000000000000000000000000000000a7887887aaaaaaaacccccccc11111111000000000000000000000000
555777555557775555577755555777550000000000000000000000000000000000000000a7778788aaaaaaaacccccccc11111111000000000000000000000000
555777555557775555577755555777550000000000000000000000000000000000000000aa78877a9aaaa9aacccccccc11111111000000000000000000000000
557777755577777555777775557777750000000000000000000000000000000000000000aaa877aaaaaaaaaacccccccc11111111000000000000000000000000
555555555555555555555555555555550000000000000000000000000000000000000000aaaaaaaaaaaaaaaacccccccc11111111000000000000000000000000
55567555555675555557755555576555555765555557655555577555555675550000000000000000aabbabba0000000000000000000000000000000000000000
55677755556777555577775555777655557776555577765555777755556777550000000000000000aba3b33b0000000000000000000000000000000000000000
56070775560770755707707557077065577070655707706557077075560770750000000000000000aabb3ba30000000000000000000000000000000000000000
56070775560770755707707557077065577070655707706557077075560770750000000000000000ab34b3ba0000000000000000000000000000000000000000
56777775567777755777777557777765577777655777776557777775567777750000000000000000a3a4ba3a0000000000000000000000000000000000000000
55677755556777555577775555777655557776555577765555777755556777550000000000000000aa4a3aaa0000000000000000000000000000000000000000
55567757555677755557755557776555757765555777655555577555555677750000000000000000aa4aaaaa0000000000000000000000000000000000000000
55555675555567555557755555765555576555555576555555577555555567550000000000000000aa4aaaaa0000000000000000000000000000000000000000
00000000555555550000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0fffffff0fffffff0fffffff0fffffff0fffffff0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0fffff0f0fffff0f0f0fff0f0f0fff0f0f0fff0f0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0fffffff0fffffff0fffffff0fffffff0fffffff0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fff0fff0fffffff0fff0fff0fffffff0fff0fff0f0fff0f0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0fffffff0fffffff0fffffff0fffffff0fffffff0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0f0fffff0f0fffff0f0fff0f0f0fff0f0f0fff0f0
fffffff0555555550000000000000000000000000000000000000000000000000000000000000000fffffff0fffffff0fffffff0fffffff0fffffff0fffffff0
88888888000000000000000066666666666666660000000000000000000000000000000000000000888888888888888888888888888888888888888888888888
77777778000000000000000066666666666666660000000000000000000000000000000000000000777777787777777877777778777777787777777877777778
77777778000000000000000066666666666676660000000000000000000000000000000000000000777777787777787877777878787778787877787878777878
77777778000000000000000077766766666676660000000000000000000000000000000000000000777777787777777877777778777777787777777877777778
77777778000000000000000066666666666676660000000000000000000000000000000000000000777877787777777877787778777777787778777878777878
77777778000000000000000066666666666666660000000000000000000000000000000000000000777777787777777877777778777777787777777877777778
77777778000000000000000066666666666666660000000000000000000000000000000000000000777777787877777878777778787778787877787878777878
77777778000000000000000066666666666676660000000000000000000000000000000000000000777777787777777877777778777777787777777877777778
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
50505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050505050000000000000000000
__gff__
0000000000000001011020400100000101010101010100000100000000010100000000010101010000010100010101010100000000010000000000000101010101010101000000000000000000000000010101010101010100000100000000000000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__map__
61612d2d2d2d2d2d2d2d2d2d2d2d2d2d30301d30303030303030303030303030050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127050505050505050505050505272737361d111111111c0c0c1c1c1c1c1c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627272727272727272727272727272e30361d1d1c1c1c1c0c0c1c2638261c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627612323232427232523252326272e301c1c1d1f1d1d1d1d0c1c2626261c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627611818222227222222382826272e30151c361c131c131d1d1c2626261c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127616161616127616161616126272e30151c361c1337131c1d1e1d1d1c1c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2f2727272727272f2727272727272727371c1c361c0c3b0c1c361c0c1d1f1d1d050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627616161616161276161612326272e300c361d360c370c1c361c15371c1c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
262761232324232327252423232f272e3015361d360c37151c361c15371c1530050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627616138223822271818222226272e30150c0c0c0c37151c361c15371c1530050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127272727272727272727272727272737373737373737373737373737373b37050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127616161616127616124616126272737373737373737373b37373737373737050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
2627612323252327242523232326272e30151c36371c0c0c1c14371c36363630050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
26272f6122222227181822282261272e30151c1c371c0c0c1c14371c1c1c1c30050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127272727272727272727272727272e30151515151c0c0c1c14141010101030050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
61272d2d2d2d2d2d2d2d2d2d2d2d2d2e30303030303030303030303030303030050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
6127323232323232323232323232323235353535353535353535353535353535050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
051a0f05052929290f05052929290f323536360f373737373737373737370f35050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
051a19191919191919191919191919191919373737053c050f1c1c0539373737050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a052c7373737373737373391a2932350c05053a050529291c1c05290c3735050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a29050505053f05050505051a2932350c05050505053d05050505290c3735050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a290505050505051d1d1d051a0532350c053f0505050505053e0529373737050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a2905050505051d1d1d1d1d1a191919190505292905050505050537370f4a050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a05053d0505051d1d1d1e1d1a2932351c051b1b1b05053905050537375a5a050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321a0f20202020201d1d1d1d1d1a0f32351c0f1b1b1b05050529053737375a4a050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
322020203a0520200f1d1d1d0505053c0505051b1b1b050505293737374a4a4a050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321b1b1b1b052020202074737373737373737305050505050537375a4a494a4a050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
32202020203c202020207405050505050505053e3905053737374a4a494a4a4b050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321b1b1b1b052073737373200f1a2932350c050529292937375a4a4a4a4a4b4b050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
32203e20200520202020202029372932350c0c0c0c3737374a4a4a4a4a4b4b4c050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
321b1b1b1b050f20203d2005293737373737373737375a5a4a494a4a1e4b4c4c050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
32323232323232323232323232323232353737350f5a5a5a4a4a4a4b4b4c4c4c050505050505050505050505050505050505050505050500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__sfx__
00110000056000760010650116501365015600136001365012650146500d600086000960009600086000c6000d6000f600213001d3001930015300133000640010300137000f3000f30010300091000510002100
